public class BinarySearch extends MysearchAlg {

	//Override the search method
	@Override
	public int search(int[] array, int num) {
		/*
		Call the sortByIndex method and store 
		the position of the element in the array in indexMap
		*/
		int[] indexMap = sortByIndex(array);
		
		/*
		Call the searchRec method to search for the location, 
		then convert to the original index and return
		*/
		return indexMap[searchRec(array, num)];
	}

	//Create searchRec method
	public int searchRec(int[] array, int num) {

		//Define the left, middle and right side of the array
		int left = 0;
		int right = array.length - 1;
		int mid;

		//Use while to determine whether the sub-array exists
		while(left <= right) {
			//find mid
			mid = (left + right) / 2;
			//Use the if statement to determine whether mid is equal to the entered number
			if (num == array[mid]) { 
				return mid;
				//If num is less than mid, search from the left
			} else if (num < array[mid]) {
				right = mid - 1;
			} else {
				//If num is greater than mid, search from the right
				left = mid + 1;
			}
		}
		return  -1;
	}

	//Create ortByIndex method to sort the array and record the index mapping
	private int[] sortByIndex(int[] array) {
		int[] index = getIndex(array.length);

		//Loop through the array, using elements as keys
		for (int i = 1; i < array.length; i++) {
			int key = array[i]; //Assign the position of the array element to the key
			int keyIndex = index[i];

			//Find the position to insert key elements
			int j = i - 1;
			//Use while loop to judge
			while (j >= 0 && array[j] > key) {
				//Move to the right and free up space for key elements
				array[j+1] = array[j];
				index[j+1] = index[j];
				j--;
			}
			//Insert key element
			array[j+1] = key;
			index[j+1] = keyIndex;
		}
		//return sorted index
		return index;
	}

	//Generate array {0，1，..., n-1}
	private int[] getIndex(int length) {
		int[] temp = new int[length];
		//Use a for loop to add values in array
		for (int i = 0; i < length; i++) {
			temp[i] = i;
		}
		return temp;
	}
}